<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shunyang Li's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://southerncross.github.io/"/>
  <updated>2016-02-01T13:15:51.000Z</updated>
  <id>http://southerncross.github.io/</id>
  
  <author>
    <name><![CDATA[Shunyang Li]]></name>
    <email><![CDATA[lishunyang@pku.edu.cn]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Meteor七牛客户端上传的例子]]></title>
    <link href="http://southerncross.github.io/2016/02/01/meteor-qiniu-client-upload-example/"/>
    <id>http://southerncross.github.io/2016/02/01/meteor-qiniu-client-upload-example/</id>
    <published>2016-02-01T08:44:53.000Z</published>
    <updated>2016-02-01T13:15:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装七牛 nodejs SDK</li>
</ol>
<p>因为 Meteor 无法使用原生 npm 包，必须借助 <a href="https://github.com/meteorhacks/npm" target="_blank" rel="external">meteorhacks</a> 才能使用，所以确保已经安装了 meteorhacks 。</p>
<p>首先安装 meteorhacks</p>
<p><code>meteor add meteorhacks:npm</code></p>
<p>然后在项目根路径下编辑 packages.json 文件，增加七牛的 node SDK</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">qiniu</span>": <span class="value"><span class="string">"6.1.9"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>完成后重启 meteor 服务器即可</p>
<p><code>meteor</code></p>
<blockquote>
<p>备注：偶尔 meteorhacks 会出现无法正确加载 node modules 的问题，如果是这样尝试先卸载 meteorhacks 然后重新安装。</p>
</blockquote>
<ol>
<li>安装七牛 js SDK</li>
</ol>
<blockquote>
<p>备注：前面安装的 nodejs SDK 是后端依赖，现在安装的 js SDK 是前端依赖，二者不要搞混了。</p>
</blockquote>
<p>根据七牛文档说明，需要下载两个东西：plupload 和 七牛的 js SDK，下载后放在相应的路径下（比如 public ）然后让 index.html 引入即可。</p>
<ol>
<li>安装 Meteor iron router</li>
</ol>
<p>因为七牛上传需要服务器端和前端配合，需要配置好路由，所以要安装 <a href="https://github.com/iron-meteor/iron-router" target="_blank" rel="external">iron router</a></p>
<p><code>meteor add iron:router</code></p>
<h2 id="u4E03_u725B_u4E0A_u4F20_u6D41_u7A0B"><a href="#u4E03_u725B_u4E0A_u4F20_u6D41_u7A0B" class="headerlink" title="七牛上传流程"></a>七牛上传流程</h2><p>首先再回顾一下七牛官方教程中提到的文件上传流程</p>
<img src="/2016/02/01/meteor-qiniu-client-upload-example/qiniu-upload-flow.png" alt="七牛上传流程" title="七牛上传流程">
<blockquote>
<p>业务服务器指的是 Meteor 所在服务器</p>
</blockquote>
<p>其中，步骤 1 和 2 需要借助前面安装的七牛 nodejs SDK 实现，而步骤 3 和 4 则需要借助 js SDK实现。</p>
<h2 id="u670D_u52A1_u5668_u7AEF"><a href="#u670D_u52A1_u5668_u7AEF" class="headerlink" title="服务器端"></a>服务器端</h2><p>首先从服务器端开始，其实要做的就一件事：响应 token 请求</p>
<p>利用 iron router，配置好相应路由 method</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qiniu = Meteor.npmRequire(<span class="string">'qiniu'</span>);</span><br><span class="line">qiniu.conf.ACCESS_KEY = <span class="string">'你的 ACCESS_KEY'</span>;</span><br><span class="line">qiniu.conf.SECRET_KEY = <span class="string">'你的 SECRET_KEY'</span>;</span><br><span class="line"></span><br><span class="line">Router.route(<span class="string">'/api/uptoken'</span>, &#123; where: <span class="string">'server'</span> &#125;)</span><br><span class="line">.get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">this</span>.response;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="keyword">new</span> qiniu.rs.PutPolicy(<span class="string">'你的bucket名字'</span>);</span><br><span class="line"></span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(&#123; uptoken: token &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样，前端就可以通过向 ‘/api/uptoken’ 这个 url 请求 upload token 了</p>
<p>当然，这里只是出于演示的目的，简化了 token 的生成过程。具体的细节请参考七牛的 <a href="http://developer.qiniu.com/docs/v6/sdk/nodejs-sdk.html" target="_blank" rel="external">nodejs SDK 文档</a></p>
<h2 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h2><p>客户端有两件事要做</p>
<ol>
<li><p>向后端请求 upload token</p>
<p>只需要向之前定义的 url 发送 GET 请求即可。方法有很多种，这里就不罗嗦了。</p>
</li>
<li><p>拿着 upload token 向七牛服务器上传文件</p>
<p>这里要用到七牛的 js SDK。因为只是演示，所以就直接复制 js SDK 文档上的代码了。</p>
</li>
</ol>
<p>别忘了在 html 页面中放置一个 id 为 pickfiles 的 button ，而且其父容器 id 为 container。这是 plupload 所需要的，你也可以在 SDK 的配置中自定义 id 。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Qiniu.uploader(&#123;</span><br><span class="line">  runtimes: <span class="string">'html5,html4'</span>,          <span class="comment">//上传模式,依次退化</span></span><br><span class="line">  browse_button: <span class="string">'pickfiles'</span>,       <span class="comment">//上传选择的点选按钮，**必需**</span></span><br><span class="line">  uptoken_url: <span class="string">'/api/uptoken'</span>,      <span class="comment">//Ajax请求upToken的Url，**强烈建议设置**（服务端提供）</span></span><br><span class="line">  domain: <span class="string">'http://你的七牛域名'</span>,      <span class="comment">//bucket 域名，下载资源时用到，**必需**</span></span><br><span class="line">  get_new_uptoken: <span class="literal">false</span>,           <span class="comment">//设置上传文件的时候是否每次都重新获取新的token</span></span><br><span class="line">  container: <span class="string">'container'</span>,           <span class="comment">//上传区域DOM ID，默认是browser_button的父元素，</span></span><br><span class="line">  max_file_size: <span class="string">'100mb'</span>,           <span class="comment">//最大文件体积限制</span></span><br><span class="line">  max_retries: <span class="number">3</span>,                   <span class="comment">//上传失败最大重试次数</span></span><br><span class="line">  dragdrop: <span class="literal">true</span>,                   <span class="comment">//开启可拖曳上传</span></span><br><span class="line">  drop_element: <span class="string">'container'</span>,        <span class="comment">//拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传</span></span><br><span class="line">  chunk_size: <span class="string">'4mb'</span>,                <span class="comment">//分块上传时，每片的体积</span></span><br><span class="line">  auto_start: <span class="literal">true</span>,                 <span class="comment">//选择文件后自动上传，若关闭需要自己绑定事件触发上传,</span></span><br><span class="line">  init: &#123;</span><br><span class="line">    FilesAdded: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span><br><span class="line">      plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 文件添加进队列后,处理相关的事情</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    BeforeUpload: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每个文件上传前,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    UploadProgress: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每个文件上传时,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    FileUploaded: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每个文件上传成功后,处理相关的事情</span></span><br><span class="line">      <span class="comment">// 其中 info 是文件上传成功后，服务端返回的json，形式如</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",</span></span><br><span class="line">      <span class="comment">//    "key": "gogopher.jpg"</span></span><br><span class="line">      <span class="comment">//  &#125;</span></span><br><span class="line">      <span class="comment">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// var domain = up.getOption('domain');</span></span><br><span class="line">      <span class="comment">// var res = parseJSON(info);</span></span><br><span class="line">      <span class="comment">// var sourceLink = domain + res.key; 获取上传成功后的文件的Url</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">Error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 上传出错时,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    UploadComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//队列文件处理完毕后,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Key: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 若想在前端对每个文件的key进行个性化处理，可以配置该函数</span></span><br><span class="line">      <span class="comment">// 该配置必须要在 unique_names: false , save_key: false 时才生效</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> key = <span class="string">""</span>;</span><br><span class="line">      <span class="comment">// do something with key here</span></span><br><span class="line">      <span class="keyword">return</span> key</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="u5927_u529F_u544A_u6210_uFF01"><a href="#u5927_u529F_u544A_u6210_uFF01" class="headerlink" title="大功告成！"></a>大功告成！</h2><p>作完上面的工作后，你就可以上传文件了，赶紧试试吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装七牛 nodejs SDK</l]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://southerncross.github.io/2016/02/01/hello-world/"/>
    <id>http://southerncross.github.io/2016/02/01/hello-world/</id>
    <published>2016-02-01T08:26:15.000Z</published>
    <updated>2016-02-01T08:26:15.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
