<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Shunyang Li's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://southerncross.github.io/"/>
  <updated>2016-02-20T05:50:49.000Z</updated>
  <id>http://southerncross.github.io/</id>
  
  <author>
    <name><![CDATA[Shunyang Li]]></name>
    <email><![CDATA[lishunyang@pku.edu.cn]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何正确使用h1 h2 h3]]></title>
    <link href="http://southerncross.github.io/2016/02/14/how-to-use-h1-h2-h3/"/>
    <id>http://southerncross.github.io/2016/02/14/how-to-use-h1-h2-h3/</id>
    <published>2016-02-14T13:29:18.000Z</published>
    <updated>2016-02-20T05:50:49.000Z</updated>
    <content type="html"><![CDATA[<p><code>h1</code>，<code>h2</code>，<code>h3</code>，<code>h4</code>，<code>h5</code>，<code>h6</code>（以下简称<code>h1~6</code>）是 html 的原生标签，虽然今天并不常用。</p>
<h2 id="h1_7E6__u5E2E_u52A9_u88F8_u5954_u7684_u9875_u9762_u7A7F_u4E0A_u5E95_u88E4"><a href="#h1_7E6__u5E2E_u52A9_u88F8_u5954_u7684_u9875_u9762_u7A7F_u4E0A_u5E95_u88E4" class="headerlink" title="h1~6 帮助裸奔的页面穿上底裤"></a>h1~6 帮助裸奔的页面穿上底裤</h2><p>1995 年 9 月，<a href="https://www.ietf.org/" target="_blank" rel="external">国际互联网工程任务组（IETF）</a> 正式颁布了 超文本标记语言（HTML）的第一个标准 —— <a href="https://tools.ietf.org/html/rfc1866" target="_blank" rel="external">IETF RFC 1866</a>，即 HTML 2.0 。其中就包含了 <code>h1~6</code>。</p>
<blockquote>
<p>Headings: H1 … H6<br>The six heading elements, <h1\> through <h6\>, denote section headings.<br>   Although the order and occurrence of headings is not constrained by<br>   the HTML DTD, documents should not skip levels (for example, from H1<br>   to H3), as converting such documents to other representations is<br>   often problematic.</h6\></h1\></p>
</blockquote>
<p>受限于浏览器的性能以及网络带宽，当时的页面主要是以文字+少量图片的形式呈现的，甚至大部分页面都是裸奔状态（没有设置任何css效果）。这种以文本内容为主的页面其实跟我们今天使用 Markdown 写成的文档比较类似，只需要将重点放在文字的样式上就够了。因而使用 h1~6 的好处就非常明显，因为浏览器针对这些标签都会有特定的样式效果，不用额外书写css也能让页面看上去“美观”。</p>
<p>根据 <a href="https://www.w3.org/TR/CSS2/sample.html" target="_blank" rel="external">W3C 的 html4 文档标准</a>，h1~6 主要具有下列默认风格：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span>, <span class="tag">h2</span>, <span class="tag">h3</span>, <span class="tag">h4</span>, <span class="tag">h5</span>, <span class="tag">h6</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">unicode-bidi</span>:<span class="value"> embed</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> bolder</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h1</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">2em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> .<span class="number">67em</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h2</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">1.5em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> .<span class="number">75em</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h3</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">1.17em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> .<span class="number">83em</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h4</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1.12em</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h5</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> .<span class="number">83em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1.5em</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">h6</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> .<span class="number">75em</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1.67em</span> <span class="number">0</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>简单来说就是</p>
<ol>
<li><code>h1~6</code> 自带加粗效果</li>
<li><code>h1~3</code> 比普通文本字号大，<code>h4</code> 跟普通文本字号一样，<code>h5~6</code> 比普通文本小</li>
<li><code>h1~6</code> 是 <code>block</code> 元素，自带上下边距</li>
</ol>
<h2 id="h1_7E6__u9ED8_u8BA4_u6837_u5F0F_u7684_u53EF_u7528_u6027_u51E0_u4E4E_u4E3A_u96F6"><a href="#h1_7E6__u9ED8_u8BA4_u6837_u5F0F_u7684_u53EF_u7528_u6027_u51E0_u4E4E_u4E3A_u96F6" class="headerlink" title="h1~6 默认样式的可用性几乎为零"></a>h1~6 默认样式的可用性几乎为零</h2><p>上面也提到了，<code>h1~6</code> 是自带默认效果的，这对早期的裸奔页面非常重要，但是在今天的网页设计中几乎是毫无作用的。因为那些默认效果恰好匹配上页面设计图的概率几乎为零，所以通常你都需要用自己的样式覆盖默认的效果（字号、粗细、上下边距、display 效果，等等等等）。</p>
<p>所以，<strong>不要从样式的角度考虑是否用 h1~6 以及该用他们中的哪一个</strong>。你就当他们跟 <code>p</code> 标签一样没有任何效果吧。</p>
<h2 id="h1_7E6__u7684_u8BED_u4E49_u5316_u6548_u679C_u6781_u5176_u6709_u9650"><a href="#h1_7E6__u7684_u8BED_u4E49_u5316_u6548_u679C_u6781_u5176_u6709_u9650" class="headerlink" title="h1~6 的语义化效果极其有限"></a>h1~6 的语义化效果极其有限</h2><p>大部分人使用 <code>h1~6</code> 想必是因为看中了其语义化标签的特点。</p>
<blockquote>
<p>你看，这里使用 h1，开发人员一眼看过去就知道这是标题，多么清楚。</p>
</blockquote>
<p>这其实是一种自欺欺人的想法。首先，开发人员有必要知道“这是标题”吗？就算知道它是标题，你又能怎样？如果是为了设置样式，还不是得乖乖使用 <code>class</code>。但是既然都已经用到描述能力更强的 <code>class</code>，还有必要纠结 <code>h1~6</code> 仅有的一点点语义信息吗？</p>
<ul>
<li>一个开发者见到 h1，那他能知道什么呢？</li>
<li>一个开发者见到 <code>.settings__user-profile__title</code>，他又能知道什么呢？</li>
</ul>
<p>你完全可以通过合理命名的 <code>class</code> 属性体现“语义化”特性，不但更灵活，而且更有效。</p>
<h2 id="h1_7E6__u5F88_u5BB9_u6613_u88AB_u6EE5_u7528"><a href="#h1_7E6__u5F88_u5BB9_u6613_u88AB_u6EE5_u7528" class="headerlink" title="h1~6 很容易被滥用"></a>h1~6 很容易被滥用</h2><p>既然 <code>h1~6</code> 都表示标题，那么问题来了，什么样的标题应该用 <code>h1</code>，什么样的标题应该用 <code>h2</code>，什么样的标题应该用 <code>h3</code> …</p>
<p>你会发现，当你的页面几乎都是文字的时候，这个问题很好区分。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">  <span class="number">1.1</span></span><br><span class="line">  <span class="number">1.2</span></span><br><span class="line">    <span class="number">1.2</span><span class="number">.1</span></span><br><span class="line">    <span class="number">1.2</span><span class="number">.2</span></span><br><span class="line">    <span class="number">1.2</span><span class="number">.3</span></span><br><span class="line">  <span class="number">1.3</span></span><br><span class="line"><span class="number">2.</span></span><br><span class="line">  <span class="number">2.1</span></span><br><span class="line">  <span class="number">2.2</span></span><br><span class="line">  <span class="number">2.3</span></span><br></pre></td></tr></table></figure>
<p>上面的文章结构可以跟 <code>h1~6</code> 无缝衔接。</p>
<p>可是当你的页面充满了表格、弹窗、下拉菜单、导航条、图片、按钮的时候，你很难整理出像上面一样清晰的文档结构。此时，问题的答案就没有那么显然了。导航的标题，图片的标题、表格的标题、表单的标题、弹窗的标题、下拉的标题…</p>
<p>你很快就会迷失在“这个标题应该用 <code>h1~6</code> 之中的哪一个”的问题里面。</p>
<p>到最后，这些标签分散在各个页面里，你也不清楚自己在哪些地方用到了 <code>h1</code>， <code>h2</code>，<code>h3</code>。于是你开始自暴自弃，看心情使用，<code>h1~6</code> 的组织变得一团糟。</p>
<p>假如开发者是一个团队，那上面的情况还要严重许多，为了规范代码，你不得不整理一份编码文档，用来规定什么地方用什么标签，除了督促成员遵守，还得定期更新维护。稍微一不小心，<code>h1~6</code> 就会混乱起来。</p>
<blockquote>
<p>使用一门灵活的语言对于个人开发是很方便的，但是对于团队开发将是灾难性的，因为你不得不在语法之外规定一长串的“编码规范”以保证整个团队产出的代码风格一致。语言本身语法的“约束”越少，“编码规范”就越长。</p>
</blockquote>
<p>如果彻底不用 <code>h1~6</code> 或者仅保留 <code>h1</code>，那么上面的问题就立即被解决了。这也是为什么有些大公司只允许使用 <code>h1</code> 的原因。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p><code>h1~6</code> 仅适用于以文字内容为主的页面，对于其他页面，顶多用到 <code>h1</code> 就够了。让 <code>h2~6</code> 见鬼去吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>h1</code>，<code>h2</code>，<code>h3</code>，<code>h4</code>，<code>h5</code>，<code>h6</code>（以下简称<code>h1~6</code>）是 html 的原生标签，虽然今天并不]]>
    </summary>
    
      <category term="front-end" scheme="http://southerncross.github.io/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meteor七牛客户端上传的例子]]></title>
    <link href="http://southerncross.github.io/2016/02/01/meteor-qiniu-client-upload-example/"/>
    <id>http://southerncross.github.io/2016/02/01/meteor-qiniu-client-upload-example/</id>
    <published>2016-02-01T08:44:53.000Z</published>
    <updated>2016-02-01T14:43:31.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>安装七牛 nodejs SDK</p>
<p>因为 Meteor 无法使用原生 npm 包，必须借助 <a href="https://github.com/meteorhacks/npm" target="_blank" rel="external">meteorhacks</a> 才能使用，所以确保已经安装了 meteorhacks 。</p>
<p>首先安装 meteorhacks</p>
<p><code>meteor add meteorhacks:npm</code></p>
<p>然后在项目根路径下编辑 packages.json 文件，增加七牛的 node SDK</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">qiniu</span>": <span class="value"><span class="string">"6.1.9"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>完成后重启 meteor 服务器即可</p>
<p><code>meteor</code></p>
<blockquote>
<p>偶尔 meteorhacks 会出现无法正确加载 node modules 的问题，如果是这样尝试先卸载 meteorhacks 然后重新安装。</p>
</blockquote>
</li>
<li><p>安装七牛 js SDK</p>
<blockquote>
<p>前面安装的 nodejs SDK 是后端依赖，现在安装的 js SDK 是前端依赖，二者不要搞混了。</p>
</blockquote>
<p>根据七牛文档说明，需要下载两个东西：plupload 和 七牛的 js SDK，下载后放在相应的路径下（比如 public ）然后让 index.html 引入即可。</p>
</li>
<li><p>安装 Meteor iron router</p>
<p>因为七牛上传需要服务器端和前端配合，需要配置好路由，所以要安装 <a href="https://github.com/iron-meteor/iron-router" target="_blank" rel="external">iron router</a></p>
<p><code>meteor add iron:router</code></p>
</li>
</ol>
<h2 id="u4E03_u725B_u4E0A_u4F20_u6D41_u7A0B"><a href="#u4E03_u725B_u4E0A_u4F20_u6D41_u7A0B" class="headerlink" title="七牛上传流程"></a>七牛上传流程</h2><p>首先再回顾一下七牛官方教程中提到的文件上传流程</p>
<img src="/2016/02/01/meteor-qiniu-client-upload-example/qiniu-upload-flow.png" alt="七牛上传流程" title="七牛上传流程">
<blockquote>
<p>业务服务器指的是 Meteor 所在服务器</p>
</blockquote>
<p>其中，步骤 1 和 2 需要借助前面安装的七牛 nodejs SDK 实现，而步骤 3 和 4 则需要借助 js SDK实现。</p>
<h2 id="u670D_u52A1_u5668_u7AEF"><a href="#u670D_u52A1_u5668_u7AEF" class="headerlink" title="服务器端"></a>服务器端</h2><p>首先从服务器端开始，其实要做的就一件事：响应 token 请求</p>
<p>利用 iron router，配置好相应路由 method</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qiniu = Meteor.npmRequire(<span class="string">'qiniu'</span>);</span><br><span class="line">qiniu.conf.ACCESS_KEY = <span class="string">'你的 ACCESS_KEY'</span>;</span><br><span class="line">qiniu.conf.SECRET_KEY = <span class="string">'你的 SECRET_KEY'</span>;</span><br><span class="line"></span><br><span class="line">Router.route(<span class="string">'/api/uptoken'</span>, &#123; where: <span class="string">'server'</span> &#125;)</span><br><span class="line">.get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">this</span>.response;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="keyword">new</span> qiniu.rs.PutPolicy(<span class="string">'你的bucket名字'</span>);</span><br><span class="line"></span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(&#123; uptoken: token &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这样，前端就可以通过向 ‘/api/uptoken’ 这个 url 请求 upload token 了</p>
<p>当然，这里只是出于演示的目的，简化了 token 的生成过程。具体的细节请参考七牛的 <a href="http://developer.qiniu.com/docs/v6/sdk/nodejs-sdk.html" target="_blank" rel="external">nodejs SDK 文档</a></p>
<h2 id="u5BA2_u6237_u7AEF"><a href="#u5BA2_u6237_u7AEF" class="headerlink" title="客户端"></a>客户端</h2><p>客户端有两件事要做</p>
<ol>
<li><p>向后端请求 upload token</p>
<p>只需要向之前定义的 url 发送 GET 请求即可。方法有很多种，这里就不罗嗦了。</p>
</li>
<li><p>拿着 upload token 向七牛服务器上传文件</p>
<p>这里要用到七牛的 js SDK。因为只是演示，所以就直接复制 js SDK 文档上的代码了。</p>
<p>别忘了在 html 页面中放置一个 id 为 pickfiles 的 button ，而且其父容器 id 为 container。这是 plupload 所需要的，你也可以在 SDK 的配置中自定义 id 。</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Qiniu.uploader(&#123;</span><br><span class="line">  runtimes: <span class="string">'html5,html4'</span>,          <span class="comment">//上传模式,依次退化</span></span><br><span class="line">  browse_button: <span class="string">'pickfiles'</span>,       <span class="comment">//上传选择的点选按钮，**必需**</span></span><br><span class="line">  uptoken_url: <span class="string">'/api/uptoken'</span>,      <span class="comment">//Ajax请求upToken的Url，**强烈建议设置**（服务端提供）</span></span><br><span class="line">  domain: <span class="string">'http://你的七牛域名'</span>,      <span class="comment">//bucket 域名，下载资源时用到，**必需**</span></span><br><span class="line">  get_new_uptoken: <span class="literal">false</span>,           <span class="comment">//设置上传文件的时候是否每次都重新获取新的token</span></span><br><span class="line">  container: <span class="string">'container'</span>,           <span class="comment">//上传区域DOM ID，默认是browser_button的父元素，</span></span><br><span class="line">  max_file_size: <span class="string">'100mb'</span>,           <span class="comment">//最大文件体积限制</span></span><br><span class="line">  max_retries: <span class="number">3</span>,                   <span class="comment">//上传失败最大重试次数</span></span><br><span class="line">  dragdrop: <span class="literal">true</span>,                   <span class="comment">//开启可拖曳上传</span></span><br><span class="line">  drop_element: <span class="string">'container'</span>,        <span class="comment">//拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传</span></span><br><span class="line">  chunk_size: <span class="string">'4mb'</span>,                <span class="comment">//分块上传时，每片的体积</span></span><br><span class="line">  auto_start: <span class="literal">true</span>,                 <span class="comment">//选择文件后自动上传，若关闭需要自己绑定事件触发上传,</span></span><br><span class="line">  init: &#123;</span><br><span class="line">    FilesAdded: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span><br><span class="line">      plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 文件添加进队列后,处理相关的事情</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    BeforeUpload: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每个文件上传前,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    UploadProgress: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每个文件上传时,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    FileUploaded: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 每个文件上传成功后,处理相关的事情</span></span><br><span class="line">      <span class="comment">// 其中 info 是文件上传成功后，服务端返回的json，形式如</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",</span></span><br><span class="line">      <span class="comment">//    "key": "gogopher.jpg"</span></span><br><span class="line">      <span class="comment">//  &#125;</span></span><br><span class="line">      <span class="comment">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// var domain = up.getOption('domain');</span></span><br><span class="line">      <span class="comment">// var res = parseJSON(info);</span></span><br><span class="line">      <span class="comment">// var sourceLink = domain + res.key; 获取上传成功后的文件的Url</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">Error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 上传出错时,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    UploadComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//队列文件处理完毕后,处理相关的事情</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Key: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 若想在前端对每个文件的key进行个性化处理，可以配置该函数</span></span><br><span class="line">      <span class="comment">// 该配置必须要在 unique_names: false , save_key: false 时才生效</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> key = <span class="string">""</span>;</span><br><span class="line">      <span class="comment">// do something with key here</span></span><br><span class="line">      <span class="keyword">return</span> key</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="u5927_u529F_u544A_u6210_uFF01"><a href="#u5927_u529F_u544A_u6210_uFF01" class="headerlink" title="大功告成！"></a>大功告成！</h2><p>作完上面的工作后，你就可以上传文件了，赶紧试试吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u51C6_u5907_u5DE5_u4F5C"><a href="#u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>安装七牛 nodejs SDK]]>
    </summary>
    
  </entry>
  
</feed>
